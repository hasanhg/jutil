package cli

import (
	"path/filepath"

	"github.com/dave/jennifer/jen"
)

var (
	header = "Code generated by jutil. DO NOT EDIT."
)

func generate(jar, out string) error {
	f := jen.NewFile("main")
	f.HeaderComment(header)

	f.Comment("//go:embed *.jar").Line().
		Comment("//go:embed */*").Line().
		Var().Id("folder").Qual("embed", "FS").Line().
		Var().Id("java").String().Line().
		//
		Func().Id("main").Params().
		Block(
			jen.Id("readDir").Call(jen.Lit(".")).Line(),
			jen.If(jen.Id("java").Op("==").Lit("")).Block(
				jen.Qual("log", "Fatal").Call(jen.Lit("java binary not found")),
			).Line(),
			jen.Id("args").Op(":=").Index().String().Values(jen.Lit("-jar"), jen.Lit(jar)).Line(),
			jen.If(jen.Len(jen.Qual("os", "Args")).Op(">").Lit(0)).Block(
				jen.Id("args").Op("=").Id("append").Call(
					jen.Id("args"),
					jen.Qual("os", "Args").Index(jen.Lit(1).Op(":")).Op("..."),
				),
			).Line(),
			// cmd
			jen.Id("cmd").Op(":=").Qual("os/exec", "Command").Call(jen.Id("java"), jen.Id("args").Op("...")),
			jen.Id("cmd").Dot("Stdout").Op("=").Qual("os", "Stdout"),
			jen.Id("cmd").Dot("Stderr").Op("=").Qual("os", "Stderr").Line(),
			//
			jen.Err().Op(":=").Id("cmd").Dot("Run").Call(),
			jen.If(jen.Err().Op("!=").Nil()).Block(
				jen.Qual("log", "Fatal").Call(jen.Err()),
			),
		).Line().Line().
		//
		Func().Id("readDir").Params(jen.Id("root").String()).
		Block(
			jen.List(jen.Id("dir"), jen.Err()).Op(":=").Id("folder").Dot("ReadDir").Call(jen.Id("root")),
			jen.If(jen.Err().Op("!=").Nil()).Block(
				jen.Qual("log", "Fatal").Call(jen.Err()),
			).Line(),
			jen.For(jen.List(jen.Op("_"), jen.Id("e").Op(":=").Range().Id("dir"))).Block(
				jen.Id("extractAll").Call(jen.Id("root"), jen.Id("e")),
			),
		).Line().Line().
		//
		Func().Id("extractAll").Params(jen.Id("root").String(), jen.Id("e").Qual("io/fs", "DirEntry")).
		Block(
			jen.Id("name").Op(":=").Qual("path/filepath", "Join").Call(jen.Id("root"), jen.Id("e").Dot("Name").Call()).Line(),
			jen.List(jen.Id("info"), jen.Err()).Op(":=").Id("e").Dot("Info").Call(),
			jen.If(jen.Err().Op("!=").Nil()).Block(
				jen.Qual("log", "Fatal").Call(jen.Err()),
			).Line(),
			jen.If(jen.Id("info").Dot("IsDir").Call()).Block(
				jen.Id("readDir").Call(jen.Id("name")),
				jen.Return(),
			).Line(),
			jen.List(jen.Id("f"), jen.Err()).Op(":=").Id("folder").Dot("ReadFile").Call(jen.Id("name")),
			jen.If(jen.Err().Op("!=").Nil()).Block(
				jen.Qual("log", "Fatal").Call(jen.Err()),
			).Line(),
			jen.Id("outName").Op(":=").Id("name"),
			jen.Id("parts").Op(":=").Qual("strings", "Split").Call(jen.Id("name"), jen.Qual("fmt", "Sprintf").Call(jen.Lit("%c"), jen.Qual("os", "PathSeparator"))),
			jen.If(jen.Len(jen.Id("parts")).Op(">").Lit(1)).Block(
				jen.Id("parts").Index(jen.Lit(0)).Op("=").Id("configDir").Call(),
				jen.Id("outName").Op("=").Qual("path/filepath", "Join").Call(jen.Id("parts").Op("...")),
			).Line(),
			jen.If(jen.Id("e").Dot("Name").Call().Op("==").Lit("java")).Block(
				jen.Id("java").Op("=").Id("outName"),
			).Line(),
			jen.Err().Op("=").Qual("os", "MkdirAll").Call(jen.Qual("path/filepath", "Dir").Call(jen.Id("outName")), jen.Qual("io/fs", "ModePerm")),
			jen.If(jen.Err().Op("!=").Nil()).Block(
				jen.Qual("log", "Fatal").Call(jen.Err()),
			).Line(),
			jen.Err().Op("=").Qual("io/ioutil", "WriteFile").Call(jen.Id("outName"), jen.Id("f"), jen.Qual("io/fs", "ModePerm")),
			jen.If(jen.Err().Op("!=").Nil()).Block(
				jen.Qual("log", "Fatal").Call(jen.Err()),
			).Line(),
		).Line().Line().
		//
		Func().Id("userHomeDir").Params().String().
		Block(
			jen.If(jen.Qual("runtime", "GOOS").Op("==").Lit("windows")).Block(
				jen.Id("home").Op(":=").Qual("os", "Getenv").Call(jen.Lit("HOMEDRIVE")).Op("+").Qual("os", "Getenv").Call(jen.Lit("HOMEPATH")),
				jen.If(jen.Id("home").Op("==").Lit("")).Block(
					jen.Id("home").Op("=").Qual("os", "Getenv").Call(jen.Lit("USERPROFILE")),
				),
				jen.Return(jen.Id("home")),
			),
			jen.Return(jen.Qual("os", "Getenv").Call(jen.Lit("HOME"))),
		).Line().Line().
		//
		Func().Id("configDir").Params().String().
		Block(
			jen.Var().Defs(
				jen.Id("home").Op("=").Id("userHomeDir").Call(),
				jen.Id("dir").Op("=").Lit(""),
			),
			jen.If(jen.Qual("runtime", "GOOS").Op("==").Lit("windows")).Block(
				jen.Id("dir").Op("=").Id("home").Op("+").Lit("\\AppData\\Local\\Robomotion"),
			).Else().Block(
				jen.Id("dir").Op("=").Id("home").Op("+").Lit("/.config/robomotion"),
			),
			jen.Return(jen.Id("dir")),
		)

		//f.Render(os.Stdout)
	err := f.Save(filepath.Join(out, "main.go"))
	if err != nil {
		return err
	}

	return nil
}
